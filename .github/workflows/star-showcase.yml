name: 🌟 Update Star Showcase
on:
  schedule:
    # 每天早上 6 点运行
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  update-stars:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        # 仍然需要 jq 来解析 JSON
        run: sudo apt-get install -y jq

      - name: Fetch starred repos and generate Content
        # 使用多行脚本获取数据、生成 HTML 并存储在环境变量中
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # 1. 初始化变量，包含标题
          STAR_SHOWCASE_CONTENT="## 🌟 Star Showcase\n\n"
          
          # 2. 添加外部容器的起始 HTML
          STAR_SHOWCASE_CONTENT="${STAR_SHOWCASE_CONTENT}<div align=\"center\" style=\"display:flex; flex-wrap:wrap; justify-content:center;\">\n"

          # 3. 使用 curl 和 jq 生成 Star 卡片 HTML
          # 注意：将 curl 的输出赋给一个变量，而不是直接管道。
          STARRED_REPOS=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/users/legendundery/starred?per_page=6")
          
          # 使用 jq 生成您原来的 HTML 结构
          CARD_HTML=$(echo "$STARRED_REPOS" | \
            jq -r '.[] | "\
            <div style=\"width:280px; margin:10px; border-radius:10px; box-shadow:0 2px 8px rgba(0,0,0,0.08); padding:15px; background:#fff; text-align:left;\">\
                <a href=\"" + .html_url + "\" target=\"_blank\" style=\"text-decoration:none; color:#0969da;\">\
                    <h3>" + .full_name + "</h3>\
                </a>\
                <p style=\"color:#555; font-size:13px;\">" + (.description // "No description") + "</p>\
                <p style=\"font-size:12px; color:#888;\">⭐ " + (.stargazers_count|tostring) + "</p>\
            </div>"'
          )
          
          # 4. 将生成的卡片 HTML 添加到内容中
          STAR_SHOWCASE_CONTENT="${STAR_SHOWCASE_CONTENT}${CARD_HTML}\n"

          # 5. 添加外部容器的结束 HTML
          STAR_SHOWCASE_CONTENT="${STAR_SHOWCASE_CONTENT}</div>"

          # 6. 将最终内容输出为 GitHub Actions 环境变量，供下一步使用
          echo "STAR_SHOWCASE_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$STAR_SHOWCASE_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update README
        # 使用 awk 替换 和 之间的内容
        # 注意：我们不再使用 'cat star.md'，而是使用 shell 变量
        # 这里需要转义 $ 符号，确保 $STAR_SHOWCASE_CONTENT 被正确替换
        run: |
          # Awk 命令的逻辑：
          # 1. 遇到 START 标记，打印它。
          # 2. 插入存储在环境变量中的新内容。
          # 3. 开启跳过模式 (skip=1)。
          # 4. 遇到 END 标记，关闭跳过模式 (skip=0)，并打印 END 标记。
          # 5. 如果 skip=0，则打印行。
          
          # 将环境变量内容写入一个临时文件，方便 awk 读取，避免复杂的转义问题
          echo -e "${{ env.STAR_SHOWCASE_CONTENT }}" > star_content_tmp.md

          awk '
            BEGIN {
                # 读取临时文件内容到 Awk 变量 (Content)
                while ((getline < "star_content_tmp.md") > 0) {
                    Content = Content $0 "\n"
                }
                close("star_content_tmp.md")
            }
            // { 
                print; 
                printf "%s", Content; # 打印新内容
                skip = 1; 
                next 
            }
            // { 
                skip = 0; 
            }
            skip == 0 { 
                print 
            }
          ' README.md > tmp && mv tmp README.md
          
      - name: Commit and push changes
        # 确保您的仓库有 write 权限
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 检查是否有实际修改，避免空提交
          if git diff --exit-code README.md > /dev/null; then
              echo "No changes to commit"
          else
              git add README.md
              git commit -m "✨ Auto-update Star Showcase"
              git push
          fi
